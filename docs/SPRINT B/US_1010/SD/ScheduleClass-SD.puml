@startuml

skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Teacher as Actor
participant ScheduleClassUI as UI <<presentation>>
participant ScheduleClassController as Controller <<application>>
participant AuthenticationService as Autzh <<service>>
participant UserSession as UserSession <<session>>
participant ClassManagementService as Service <<service>>
participant ClassFactory as CFactory <<factory>>
participant "class:Class" as Class <<domain>>
participant "class:Course" as Domain <<domain>>
participant PersistenceContext as Context <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database CourseRepository as Repository <<repository>>

Actor --> UI : schedule class

activate UI
UI -> Controller : create()

UI -> Actor : ask class details
Actor -> UI : courseCode, title, dayOfWeek, startTime, endTime

UI -> Controller : scheduleClass(courseCode, title, dayOfWeek, startTime, endTime)
activate Controller

Controller -> Autzh : create()
Controller -> Autzh : ensureAuthenticatedUserHasAnyOf(CourseRoles.TEACHER)
Autzh -> UserSession : create()

activate Autzh
Controller -> Autzh : session()
Autzh -> Controller : session
deactivate Autzh

Controller -> UserSession : authenticatedUser()
activate UserSession
UserSession -> Controller : user
deactivate UserSession

Controller -> Service : create()
activate Service
Controller -> Service : scheduleNewClass(courseCode, title, dayOfWeek, startTime, endTime, teacher)

Service -> Context : repositories()
activate Context
Context -> Factory : create()
Context -> Service : factory
deactivate Context

Service -> Factory : courses()
activate Factory
Factory -> Repository : create()
Factory -> Service : courseRepository
deactivate Repository
deactivate Factory

Service -> CFactory : create()
activate CFactory
Service -> CFactory : create(title, dayOfWeek, startTime, endTime, teacher, students)

CFactory -> Class : Class(title, dayOfWeek, startTime, endTime, teacher, students)
activate Class

Class -> CFactory : class
deactivate Class

CFactory -> Service : class
deactivate CFactory

Service -> Domain : addClass(class)
Service -> Repository : save(class)

activate Repository
Repository --> Service : class
deactivate Repository

Service --> Controller : class
deactivate Service

Controller --> UI : class
deactivate Controller

UI -> Actor : show the operation result

deactivate UI
@enduml