@startuml
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Teacher as Actor
participant CreateExamUI as UI <<presentation>>
participant CreateExamController as Controller <<application>>
participant ExamManagementService as Service <<service>>
participant AuthenticationService as Autzh <<service>>
participant UserSession as UserSession <<session>>
participant PersistenceContext as Context <<persistence>>
participant RepositoryFactory as Factory <<factory>>
participant ExamTemplateEvaluator as Evaluator <<service>>
participant ExamBuilder as Builder <<builder>>
participant "class:ExamTemplate" as Exam <<domain>>
database CourseRepository as CourseRepo <<repository>>
database ExamRepository as Repository <<repository>>

Actor --> UI : create an exam

activate UI
UI -> Controller : create()
UI -> Actor : ask exam's details
Actor -> UI : courseCode, filePath
UI -> Controller : createExam(courseCode, filePath)

activate Controller
Controller -> Autzh : create()
Controller -> Autzh : ensureAuthenticatedUserHasAnyOf(CourseRoles.TEACHER)
Autzh -> UserSession : create()

activate Autzh
Controller -> Autzh : session()
Autzh -> Controller : session
deactivate Autzh

Controller -> UserSession : authenticatedUser()
activate UserSession
UserSession -> Controller : user
deactivate UserSession

Controller -> Service : create()
activate Service
Controller -> Service : createExam(courseCode, filePath, teacher)

Service -> Context : repositories()
activate Context
Context -> Factory : create()
Context -> Service : factory
deactivate Context

Service -> Factory : courses()
activate Factory
Factory -> CourseRepo : create()
Factory -> Service : courses
deactivate Factory
Service -> CourseRepo : findByCode(courseCode)
activate CourseRepo
CourseRepo -> Service : course
deactivate CourseRepo
Service -> Evaluator : evaluateFromFile(filePath, teacher, course, courseStudents)
activate Evaluator
Evaluator -> Builder : build()
deactivate Evaluator
activate Builder
Builder -> Exam : ExamTemplate(examTitle, openDate, closeDate, examDescription, feedbackType, gradeType, sections, teacher, students, course)
activate Exam
Exam --> Builder : examTemplate
deactivate Exam
Builder -> Service : examTemplate
deactivate Builder

Service -> Context : repositories()
activate Context
Context -> Factory : create()
Context -> Service : factory
deactivate Context

Service -> Factory : exans()
activate Factory
Factory -> Repository : create()
Factory -> Service : examRepository
deactivate Factory
deactivate Repository
deactivate Factory

Service -> Repository : save(examTemplate)

activate Repository
Repository --> Service : examTemplate
deactivate Repository

Service --> Controller : examTemplate
deactivate Service

Controller --> UI : examTemplate
deactivate Controller

UI --> Actor : show the operation success

deactivate UI

@enduml